@using Gifflix.Models
@inject MovieService MovieService

<div class="items" style="@Style">
    @if (movies != null && movies.Count > 0)
    {
        @foreach (var movie in movies)
        {
            <div class="item iimg" @onmouseover="() => ShowBackground(movie.Id, movie.FullbackdropUrl)" @onmouseout="HideBackground" style="@GetBackgroundStyle(movie.Id, movie.FullbackdropUrl)">
                <img src="@movie.FullbackdropUrl" alt="@movie.Title">
                <p>@movie.Title</p>
                @* <div class="menu">
                    <div class="items-menu">
                        <span class="ico play"><ion-icon name="play"></ion-icon></span>
                        <span class="ico star"><ion-icon name="star"></ion-icon></span>
                        <span class="ico thumbs-up"><ion-icon name="thumbs-up"></ion-icon></span>
                        <span class="ico thumbs-down"><ion-icon name="thumbs-down"></ion-icon></span>
                    </div>
                </div> *@
            </div>


        }
    }
</div>
@code {
    [Parameter]
    public string Style { get; set; } = string.Empty;

    [Parameter]
    public Genre Genre { get; set; }

    private string CurrentBackgroundUrl { get; set; } = string.Empty;
    private int? HoveredItemId { get; set; } = null;

    private List<Movie> movies = new List<Movie>();

    protected override async Task OnInitializedAsync()
    {
        // Busca filmes pelo ID do gênero
        movies = await MovieService.GetMoviesByGenreAsync(Genre.Id);
    }

    private void ShowBackground(int Id, string MovieURL)
    {
        CurrentBackgroundUrl = MovieURL;
        HoveredItemId = Id;
    }

    private void HideBackground()
    {
        CurrentBackgroundUrl = string.Empty;
        HoveredItemId = null;
    }

    private string GetBackgroundStyle(int Id, string MovieURL)
    {
        if (Id == HoveredItemId)
        {
            //return $"background-image: url('{CurrentBackgroundUrl}'); background-size: cover; background-position: center; background-repeat: no-repeat; flex-grow: 2; z-index: 1;";
            return $"min-width: 310px; max-width: 200px; transform: scale(1.3); transition: transform 0.5s ease; position: static;  z-index: 1; max-height: 175px;";
        }
        return string.Empty;
    }
}
