@page "/"

@using Gifflix.Models
@using Gifflix.Service

@inject NavigationManager NavigationManager
@inject MovieService MovieService
@inject GiphyService GiphyService

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="home-page">
    <!-- Banner principal com detalhes da série/filme em destaque -->
    <div class="banner" style="background-image: url('/images/Ore.gif');">
        <Banner />
    </div>

    <!-- Seção "Popular on Gifflix" -->
    <div class="popular-section">
        <h2>Popular on Gifflix</h2>
        <Popular PopularMovies="@popularMovies" MoreDetails="GoToDetailPage" />
    </div>

    @if (genres != null && genres.Count > 0)
    {
        @for (int i = 0; i < Math.Min(genres.Count, 20); i++)
        {
            <div class="item-section">
                <h2>@genres[i].Name</h2>
                @*<Item Genre="@genres[i]" /> *@
                <Items Genre="@genres[i]" />
            </div>
        }
    }
    else
    {
        <p>Nenhum gênero disponível.</p>
    }    
    <div style="margin-bottom:100px"></div>
</div>

<h3>Search GIFs</h3>

<input @bind="searchQuery" placeholder="Search for GIFs" />
<button @onclick="SearchGifs">Search</button>



@code {
    private MovieResponse popularMovies;
    private string searchQuery;
    private GiphyResponse gifs;

    private List<Genre> genres = new List<Genre>();

    protected override async Task OnInitializedAsync()
    {
        genres = await MovieService.GetGenresAsync();
        popularMovies = await MovieService.GetPopularMoviesAsync($"movie/popular?language=en-US&page=1");
    }

    private void GoToDetailPage(int movieId)
    {
        NavigationManager.NavigateTo($"/detail/title/{movieId}");
    }


    private async Task SearchGifs()
    {
        gifs = await GiphyService.SearchGifsAsync(searchQuery);
    }

}